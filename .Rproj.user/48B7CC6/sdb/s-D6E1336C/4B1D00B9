{
    "contents" : "# Get flow from USGS\nlibrary('waterData')\nlibrary('plyr')\nlibrary('dataRetrieval')\n\ngauges = c(\n            #\n            # Clearwater\n            #\n           '13340000', #CLEARWATER RIVER AT OROFINO ID\n           # NF Clearwater at Ahsahka '13341000',   NO DISCHARGE, use DWO outflow\n           #\n           # Snake\n           #\n           '13334300', #SNAKE RIVER NEAR ANATONE, WA\n           '13344500', #TUCANNON RIVER NEAR STARBUCK, WA  - NO TEMP\n           '13351000', #PALOUSE RIVER AT HOOPER, WA       - NO TEMP\n           #\n           # Columbia\n           #\n           # Grand Coulee Downstream from DART\n           '12447200', # Okanogan\n           '12449950', # Methow\n           '12452500', # Chelan SPILLWAY - NO TEMP\n           '12462500', # Wnatchee - NO TEMP\n           '12472600', # Crab Creek CRAB CREEK NEAR BEVERLY \n           '12510500', # Yakima - NO TEMP\n           '14018500', # Walla Walla - NO TEMP\n           '14048000', # John Day  - NO TEMP\n           '14103000' # Deschutes \n           )\n\ntemperature.gauges = c(\n          #### Tribs\n          #\n          # Clearwater\n          #\n          '13340000', #CLEARWATER RIVER AT OROFINO ID\n          '13341000', #NF Clearwater at Ahsahka\n          #\n          # Snake\n          #\n          '13334300', #SNAKE RIVER NEAR ANATONE, WA\n          # TUCANNON RIVER =  Washington DOE 35B060 = Continous?\n          # PALOUSE RIVER = Washington DOE 34A070 = Continous?\n          #\n          # Columbia\n          #\n          # Grand Coulee Downstream from DART\n          '12447200', # Okanogan\n          # Methow = Washington DOE 48A070 = Continouse?\n          # Chelan River = Washtington DOE 47A070, needs to be estimated\n          # Wnatchee River = Washington DOE 45A070 = Continous?\n          # Crab Creek = Washtington DOE 41A070 = Continous\n          # Walla Walla  USGS 14018500  - needs to be estimated\n          # John Day River -Oregon DEQ 404065 ??? - probably needs to be estimated\n          '14103000' # Deschutes \n          )\n\n\n# Washtington DOE\n# Tucannon River 35B060 - Temperature\n# Palouse River 34A070 - Temperature\n# Crab Creek DOE 41A070 - Flow and Temperature\n# \n\n\n\nsdate = \"2015-01-01\"\nedate = \"2015-12-31\"\n\ndischarges = c()\nfor(i in 1:length(gauges)){\n  data = importDVs(gauges[i],code=\"00060\", sdate=sdate, edate=edate)\n  #plotParam(data)\n  discharges = cbind(discharges, data$val)\n}\n#write.csv(discharges, 'discharges.2015.csv')\ndischarges.usgs = as.data.frame(discharges)\nnames(discharges.usgs) = gauges\n\ndwo.discharge =as.numeric(ts.dwo$Outflow..kcfs.)\nplot(dwo.discharge, typ='l')\n#dwo.discharge = na.interp(dwo.discharge)\ndwo.discharge = na.locf(dwo.discharge)\nplot(dwo.discharge, typ='l')\ndwo.dates = as.character(ts.dwo$Date)\ndf = data.frame(Date = dwo.dates, Discharge = dwo.discharge)\ndwo.daily.discharges <- ddply(df, c(\"Date\"), summarise,\n               mean = mean(Discharge)\n)\nplot(dwo.daily.discharges$mean, typ='l')\n\nprepare.dam.discharge = function(ts){\n  discharges = as.numeric(ts$Outflow..kcfs.)\n  plot(discharges, typ='l')\n  #dwo.discharge = na.interp(dwo.discharge)\n  discharges = na.locf(discharges)\n  plot(discharges, typ='l')\n  dates = as.character(ts$Date)\n  df = data.frame(Date = dates, Discharge = discharges)\n  daily.discharges <- ddply(df, c(\"Date\"), summarise,\n                                mean = mean(Discharge)\n  )\n  plot(daily.discharges$mean, typ='l')\n  return(daily.discharges)\n}\n\nurl = 'http://www.cbr.washington.edu/dart/cs/php/rpt/wqm_hourly.php?sc=1&outputFormat=csv&year=YEAR&proj=PROJECT&startdate=01%2F01&days=365'\nyear = 2015\nprojects = c('DWQI', 'GCGW')\ndischarges.all = 1:365\nfor(p in 1:length(projects)){\n  url1 = str_replace(url, 'YEAR', year)\n  url1 = str_replace(url1, 'PROJECT', projects[p])\n  data = read.csv(url1)\n  ts = temp.timeseries(data)\n  daily.discharges = prepare.dam.discharge(ts)\n  discharges.all = rbind(discharges.all, daily.discharges[,2]*1000)\n}\ndischarges.all = t(discharges.all)\ndischarges.dams.df = as.data.frame(discharges.all)\nnames(discharges.dams.df) = c('Julian', projects)\n\n\n\n\n# we don't need ice\n#ice.discharge =as.numeric(ts.ice$Outflow..kcfs.)\n#plot(ice.discharge, typ='l')\n#ice.discharge = na.locf(ice.discharge)\n#plot(ice.discharge, typ='l')\n#ice.dates = as.character(ts.ice$Date)\n#df = data.frame(Date = ice.dates, Discharge = ice.discharge)\n#ice.daily.discharges <- ddply(df, c(\"Date\"), summarise,\n#                              mean = mean(Discharge)\n#)\n#plot(ice.daily.discharges$mean, typ='l')\n\n\n\n\n\n\n\n\n############## Temperatures\n\n# 1. Estimate tribs using Table 3-1 where necessary\n# 2. Get temps from USGS stations\n# 3. Synthesize continuous monitoring data from Washington DOE\n# 4. Get temperature from Dworshak Tailwater and Grand Coulee Downstream\n\n#\n# 1.\n#\n#site =c('Tucannon', 'Tucannon')\n#limb =c('rising',    'falling')\n#start=c(1,           32*7)\n#alpha=c(22,          22)\n#beta= c(12.2640,     11.3406)\n#gamma=c(.1698,       .1570)\n#mu=   c(.4717,       .4362)\n#coeffs.df = data.frame(site=site, limb=limb, start=start, alpha=alpha, beta=beta, gamma=gamma, mu=mu)\n\n# Read coefficients from a file instead\ncoeffs.df = read.csv('WaterTemperatureApproximationCoefficients.csv')\n\napproximate.stream.temperature.calc = function(coeffs.df, air.temperature.limb){\n  T.stream = coeffs.df$mu + (coeffs.df$alpha - coeffs.df$mu) / (1 + exp( coeffs.df$gamma * ( coeffs.df$beta - air.temperature.limb)))\n  return(T.stream)\n}\n\napproximate.stream.temperature = function(coeffs.df, data){\n  \n  coeffs.df.rising = coeffs.df[limb == 'rising',]\n  coeffs.df.falling = coeffs.df[limb == 'falling',]\n  \n  air.temperature.rising = data$AirTemperature[data$Julian < coeffs.df.falling$start]\n  air.temperature.falling = data$AirTemperature[data$Julian >= coeffs.df.falling$start]\n  \n  T.stream.rising = approximate.stream.temperature.calc(coeffs.df.rising, air.temperature.rising)\n  T.stream.falling = approximate.stream.temperature.calc(coeffs.df.falling, air.temperature.falling)\n  T.stream = c(T.stream.rising, T.stream.falling)\n  return(T.stream)\n}\n\nlewiston = read.table('RBM-10/LEWISTON.HOT', header=FALSE, skip=4)\nnames(lewiston)=c('Julian', 'Solar', 'Atomospheric', 'AirTemperature', 'Wind', 'Bowen', 'VaporPressure', 'PhotoPeriod')\nyakima = read.table('RBM-10/YAKIMA.HOT', header=FALSE, skip=4)\nnames(yakima)=c('Julian', 'Solar', 'Atomospheric', 'AirTemperature', 'Wind', 'Bowen', 'VaporPressure', 'PhotoPeriod')\nwenatchee = read.table('RBM-10/WNATCHEE.HOT', header=FALSE, skip=4)\nnames(wenatchee)=c('Julian', 'Solar', 'Atomospheric', 'AirTemperature', 'Wind', 'Bowen', 'VaporPressure', 'PhotoPeriod')\n\nstations.data = list(Lewiston = lewiston, Yakima = yakima, Wenatchee = wenatchee)\n\nstreams = c('Methow', 'Tucannon', 'John Day', 'Palouse', 'Walla Walla', 'Chelan', 'Wenatchee', 'Crab Creek', 'Yakima')\nstations = c('Wenatchee', 'Lewiston', 'Lewiston', 'Yakima', 'Yakima', 'Wenatchee', 'Wenatchee', 'Wenatchee', 'Yakima')\n\nT.streams.approx = c()\nfor(i in 1:length(streams)){\n  T.stream.approx = approximate.stream.temperature(coeffs.df[coeffs.df$site==streams[i],],\n                                                   stations.data[[stations[i]]])\n  T.streams.approx = cbind(T.streams.approx, T.stream.approx)\n}\ndf.approx.T = data.frame(T.streams.approx)\nnames(df.approx.T) = streams\n\nwrite.csv(df.approx.T, 'ApproximateWaterTemperatures.2015.csv')\n\n#\n# 2. Get temps from USGS Stations\n# \n\ntemperature.gauges = temperature.gauges[temperature.gauges != '13341000'] # North Fork not in the API\n\ntemperatures.usgs = c()\nfor(i in 1:length(temperature.gauges)){\n  data = importDVs(temperature.gauges[i],code=\"00010\", sdate=sdate, edate=edate)\n  plotParam(data)\n  ts = xts(data$val, order.by=data$dates)\n  names(ts) = 'Temperature'\n  ts = na.approx(ts)\n  temperatures.usgs = cbind(temperatures.usgs, as.numeric(ts$Temperature))\n}\ntemperatures.usgs = data.frame(temperatures.usgs)\nnames(temperatures.usgs) = temperature.gauges\n\n\n#\n# 2b Load data from North Fork of Salmon manually from csv\n#\nuv <- readNWISuv(siteNumbers = '13341000',\n                     parameterCd = \"00010\",\n                     startDate = sdate,\n                     endDate = edate)\nts.uv = xts(uv$X_00010_00011, order.by=uv$dateTime)\nnames(ts.uv) = c('WaterTemperature')\nstart = as.POSIXct(paste0(sdate, ' 00:15:00'),tz='UTC')\nfull <- seq(start, by=\"15 min\", length=364*24*4-1)\nts.full = xts(order.by=full)\nts.uv = merge(ts.full, ts.uv)\nts.uv = na.approx(ts.uv$WaterTemperature)\nts.uv$Julian = .indexyday(ts.uv)\ndf.uv = as.data.frame(ts.uv)\ndaily.water.temperature = ddply(df.uv, c('Julian'), summarize,\n      WaterTemperature=mean(WaterTemperature)\n)\ntemperatures.usgs$\"13341000\" = daily.water.temperature$WaterTemperature\n\nwrite.csv(temperatures.usgs, 'USGSWaterTemperatures.2015.csv')\n\n\n# NOTE: This function not written yet.\nprepare.dam.temperature = function(ts){\n  temperatures = as.numeric(ts$Temperature..C.)\n  plot(temperatures, typ='l')\n  temperatures = na.locf(temperatures)\n  plot(temperatures, typ='l')\n  dates = as.character(ts$Date)\n  df = data.frame(Date = dates, Temperature = temperatures)\n  daily.temperatures <- ddply(df, c(\"Date\"), summarise,\n                            mean = mean(Temperature)\n  )\n  plot(daily.temperatures$mean, typ='l')\n  return(daily.temperatures)\n}\n\nurl = 'http://www.cbr.washington.edu/dart/cs/php/rpt/wqm_hourly.php?sc=1&outputFormat=csv&year=YEAR&proj=PROJECT&startdate=01%2F01&days=365'\nyear = 2015\nprojects = c('GCGW')\ntemperatures.all = 1:365\nfor(p in 1:length(projects)){\n  url1 = str_replace(url, 'YEAR', year)\n  url1 = str_replace(url1, 'PROJECT', projects[p])\n  data = read.csv(url1)\n  ts = temp.timeseries(data)\n  daily.temperatures = prepare.dam.temperature(ts)\n  temperatures.all = rbind(temperatures.all, daily.temperatures[,2])\n}\ndam.temperatures.all = temperatures.all\ndam.temperatures.df = as.data.frame(dam.temperatures.all)\nnames(dam.temperatures.df) = projects\n\n\n#\n#  Organize all this data somehow and write out the advection file\n#\n\n# We'll build out a data frame in order\nadvection.df = data.frame( Clearwater = discharges.usgs$\"13340000\",\n                           Clearwater.T = temperatures.usgs$\"13340000\",\n                           Snake = discharges.usgs$\"13334300\",\n                           Snake.T = temperatures.usgs$\"13334300\",\n                           Columbia = discharges.dams.df$GCGW,\n                           Columbia.T = dam.temperatures.df$GCGW,\n                           NFClearwater = discharges.dams.df$DWQI,\n                           NFClearwater.T = temperatures.usgs$\"13341000\",\n                           Potlatch = 62.2,\n                           Potlatch.T = 33,\n                           Tucannon = discharges.usgs$\"13344500\",\n                           Tucannon.T = df.approx.T$Tucannon,\n                           Palouse = discharges.usgs$\"13351000\",\n                           Palouse.T = df.approx.T$Palouse,\n                           Okanogan = discharges.usgs$\"12447200\",\n                           Okanogan.T = temperatures.usgs$\"12447200\",\n                           Methow = discharges.usgs$\"12449950\",\n                           Methow.T = df.approx.T$Methow,\n                           Chelan = discharges.usgs$\"12452500\",\n                           Chelan.T = df.approx.T$Chelan,\n                           Wenatchee = discharges.usgs$\"12462500\",\n                           Wenatchee.T = df.approx.T$Wenatchee,\n                           Crab = discharges.usgs$\"12472600\",\n                           Crab.T = df.approx.T$\"Crab Creek\",\n                           Yakima = discharges.usgs$\"12510500\",\n                           Yakima.T = df.approx.T$Yakima,\n                           WallaWalla = discharges.usgs$\"14018500\",\n                           WallaWalla.T = df.approx.T$\"Walla Walla\",\n                           JohnDay = discharges.usgs$\"14048000\",\n                           JohnDay.T = df.approx.T$\"John Day\",\n                           Deschutes = discharges.usgs$\"14103000\",\n                           Deschutes.T = temperatures.usgs$\"14103000\"\n)\n\nadvection.df =round(advection.df, digits=2)\nwrite.csv(advection.df, 'Advection.2015.csv')\n\n\n#\n# And now write the Advection File!\n#\nfilename = paste0(sdate, '.adv')\nwrite(paste0('****************** INPUT FILE - ADVECTION - FOR RBM10 ****************'),\n      file = filename, append=FALSE)\nwrite(paste0('******************          ADVECTED SOURCE DATA      ****************'),\n      file = filename, append=TRUE)\nformatted.dates = sprintf(\"%10s%10s\", str_replace_all(sdate, '-', ''), str_replace_all(edate, '-', '') )\nwrite(formatted.dates, file=filename, append=TRUE)\nyear =  year(sdate)\nfor(d in 1:365){\n  advection = advection.df[d,]\n  boundaries.numbers = as.numeric(cbind(year, d, advection[,c('Clearwater', 'Clearwater.T', 'Snake', 'Snake.T', 'Columbia', 'Columbia.T')]))\n  boundaries = sprintf('%5i%5i%10.0f%10.1f%10.0f%10.1f%10.0f%10.1f', \n                       year, d, advection$Clearwater, advection$Clearwater.T, advection$Snake, advection$Snake.T, advection$Columbia, advection$Columbia.T )\n  write(boundaries, file=filename, append=TRUE)\n  write(sprintf('%5i%10.1f%5.1f', 1, advection$NFClearwater, advection$NFClearwater.T), file = filename, append = TRUE)\n  write(sprintf('%5i%10.1f%5.1f', 3, advection$Potlatch, advection$Potlatch.T), file = filename, append = TRUE)\n  write(sprintf('%5i%10.1f%5.1f', 4, advection$Tucannon, advection$Tucannon.T), file = filename, append = TRUE)\n  write(sprintf('%5i%10.1f%5.1f', 5, advection$Palouse, advection$Palouse.T), file = filename, append = TRUE)\n  write(sprintf('%5i%10.1f%5.1f', 6, advection$Okanogan, advection$Okanogan.T), file = filename, append = TRUE)\n  write(sprintf('%5i%10.1f%5.1f', 7, advection$Methow, advection$Methow.T), file = filename, append = TRUE)\n  write(sprintf('%5i%10.1f%5.1f', 8, advection$Chelan, advection$Chelan.T), file = filename, append = TRUE)\n  write(sprintf('%5i%10.1f%5.1f', 9, advection$Wenatchee, advection$Wenatchee.T), file = filename, append = TRUE)\n  write(sprintf('%5i%10.1f%5.1f', 10, advection$Crab, advection$Crab.T), file = filename, append = TRUE)\n  write(sprintf('%5i%10.1f%5.1f', 11, advection$Yakima, advection$Yakima.T), file = filename, append = TRUE)\n  write(sprintf('%5i%10.1f%5.1f', 13, advection$WallaWalla, advection$WallaWalla.T), file = filename, append = TRUE)\n  write(sprintf('%5i%10.1f%5.1f', 14, advection$JohnDay, advection$JohnDay.T), file = filename, append = TRUE)\n  write(sprintf('%5i%10.1f%5.1f', 15, advection$Deschutes, advection$Deschutes.T), file = filename, append = TRUE)  \n}\n\n\n\n#\n# Write Advection Files for Scenario2\n#\nColumbia.T.Max = 13\nfilename = '2015.Scenario2b.adv'\nwrite(paste0('****************** INPUT FILE - ADVECTION - FOR RBM10 ****************'),\n      file = filename, append=FALSE)\nwrite(paste0('******************          ADVECTED SOURCE DATA      ****************'),\n      file = filename, append=TRUE)\nformatted.dates = sprintf(\"%10s%10s\", str_replace_all(sdate, '-', ''), str_replace_all(edate, '-', '') )\nwrite(formatted.dates, file=filename, append=TRUE)\nyear =  year(sdate)\nfor(d in 1:365){\n  advection = advection.df[d,]\n  Columbia.T = advection$Columbia.T\n  if(Columbia.T > Columbia.T.Max) {\n    Columbia.T = Columbia.T.Max\n  }\n  boundaries.numbers = as.numeric(cbind(year, d, advection[,c('Clearwater', 'Clearwater.T', 'Snake', 'Snake.T', 'Columbia', 'Columbia.T')]))\n  boundaries = sprintf('%5i%5i%10.0f%10.1f%10.0f%10.1f%10.0f%10.1f', \n                       year, d, advection$Clearwater, advection$Clearwater.T, advection$Snake, advection$Snake.T, advection$Columbia, Columbia.T )\n  write(boundaries, file=filename, append=TRUE)\n  write(sprintf('%5i%10.1f%5.1f', 1, advection$NFClearwater, advection$NFClearwater.T), file = filename, append = TRUE)\n  write(sprintf('%5i%10.1f%5.1f', 3, advection$Potlatch, advection$Potlatch.T), file = filename, append = TRUE)\n  write(sprintf('%5i%10.1f%5.1f', 4, advection$Tucannon, advection$Tucannon.T), file = filename, append = TRUE)\n  write(sprintf('%5i%10.1f%5.1f', 5, advection$Palouse, advection$Palouse.T), file = filename, append = TRUE)\n  write(sprintf('%5i%10.1f%5.1f', 6, advection$Okanogan, advection$Okanogan.T), file = filename, append = TRUE)\n  write(sprintf('%5i%10.1f%5.1f', 7, advection$Methow, advection$Methow.T), file = filename, append = TRUE)\n  write(sprintf('%5i%10.1f%5.1f', 8, advection$Chelan, advection$Chelan.T), file = filename, append = TRUE)\n  write(sprintf('%5i%10.1f%5.1f', 9, advection$Wenatchee, advection$Wenatchee.T), file = filename, append = TRUE)\n  write(sprintf('%5i%10.1f%5.1f', 10, advection$Crab, advection$Crab.T), file = filename, append = TRUE)\n  write(sprintf('%5i%10.1f%5.1f', 11, advection$Yakima, advection$Yakima.T), file = filename, append = TRUE)\n  write(sprintf('%5i%10.1f%5.1f', 13, advection$WallaWalla, advection$WallaWalla.T), file = filename, append = TRUE)\n  write(sprintf('%5i%10.1f%5.1f', 14, advection$JohnDay, advection$JohnDay.T), file = filename, append = TRUE)\n  write(sprintf('%5i%10.1f%5.1f', 15, advection$Deschutes, advection$Deschutes.T), file = filename, append = TRUE)  \n}\n\n",
    "created" : 1470791827452.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1370244882",
    "id" : "4B1D00B9",
    "lastKnownWriteTime" : 1471377758,
    "path" : "~/Documents/Projects/Columbia/R/Flow.R",
    "project_path" : "Flow.R",
    "properties" : {
        "tempName" : "Untitled2"
    },
    "source_on_save" : false,
    "type" : "r_source"
}